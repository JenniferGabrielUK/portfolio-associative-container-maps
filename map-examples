// portfolio-associative-container-maps.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <algorithm>

void display(const std::map < std::string, std::set<int>>& m) {
	std::cout << "[ ";
	for (const auto& elem : m) {
		std::cout << elem.first << ": [";
			for (const auto& set_elem : elem.second)
				std::cout << set_elem << ", ";
			std::cout << "] ";
	}
	std::cout << "]" << std::endl;
}

void display(const std::map <std::string, int> &m) {
	std::cout << "[ ";
	for (const auto& elem : m) {
		std::cout << " " << elem.first << ": " << elem.second << ", ";
	}
	std::cout << " ]" << std::endl;
}

void test1() {
	std::cout << "\nTest1=======================" << std::endl;
	std::map<std::string, int> m1{
		{"Jenny", 18},
		{"Elizabeth",19},
		{"Gabriel", 20}
	};
	display(m1);
	m1.insert(std::make_pair("Jennifer", 21));
	display(m1);
	m1[ "Gandalf" ] = 22;
	display(m1);
	m1["Gandalf"] += 10;
	display(m1);
	m1["Jenny"] = 17;
	display(m1);
	m1["Jenny"] += 1;
	display(m1);
	m1.erase("Gandalf");
	display(m1);
	std::cout << "Count for Jenny: " << m1.count("Jenny") << std::endl;
	std::cout << "Count for Jennifer: " << m1.count("Jennifer") << std::endl;
	auto it = m1.find("Elizabeth");
	if (it != m1.end())
		std::cout << "Found: " << it->first << " : " << it->second << std::endl;
	it = m1.find("Gandalf");
	if (it != m1.end())
		std::cout << "Found: " << it->first << " : " << it->second << std::endl;
	else
		std::cout << "Not found: Gandalf" << std::endl;
	m1.clear();
	display(m1);
}

void test2() {

}

int main()
{
	test1();
	test2();
	return 0;
}

